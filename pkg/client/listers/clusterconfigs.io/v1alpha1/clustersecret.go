/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/alias-rahil/cluster-configs/pkg/apis/clusterconfigs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterSecretLister helps list ClusterSecrets.
// All objects returned here must be treated as read-only.
type ClusterSecretLister interface {
	// List lists all ClusterSecrets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSecret, err error)
	// ClusterSecrets returns an object that can list and get ClusterSecrets.
	ClusterSecrets(namespace string) ClusterSecretNamespaceLister
	ClusterSecretListerExpansion
}

// clusterSecretLister implements the ClusterSecretLister interface.
type clusterSecretLister struct {
	indexer cache.Indexer
}

// NewClusterSecretLister returns a new ClusterSecretLister.
func NewClusterSecretLister(indexer cache.Indexer) ClusterSecretLister {
	return &clusterSecretLister{indexer: indexer}
}

// List lists all ClusterSecrets in the indexer.
func (s *clusterSecretLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSecret, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSecret))
	})
	return ret, err
}

// ClusterSecrets returns an object that can list and get ClusterSecrets.
func (s *clusterSecretLister) ClusterSecrets(namespace string) ClusterSecretNamespaceLister {
	return clusterSecretNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterSecretNamespaceLister helps list and get ClusterSecrets.
// All objects returned here must be treated as read-only.
type ClusterSecretNamespaceLister interface {
	// List lists all ClusterSecrets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterSecret, err error)
	// Get retrieves the ClusterSecret from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterSecret, error)
	ClusterSecretNamespaceListerExpansion
}

// clusterSecretNamespaceLister implements the ClusterSecretNamespaceLister
// interface.
type clusterSecretNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterSecrets in the indexer for a given namespace.
func (s clusterSecretNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterSecret, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterSecret))
	})
	return ret, err
}

// Get retrieves the ClusterSecret from the indexer for a given namespace and name.
func (s clusterSecretNamespaceLister) Get(name string) (*v1alpha1.ClusterSecret, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustersecret"), name)
	}
	return obj.(*v1alpha1.ClusterSecret), nil
}
