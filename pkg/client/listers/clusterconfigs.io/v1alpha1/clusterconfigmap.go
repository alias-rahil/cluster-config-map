/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/alias-rahil/cluster-configs/pkg/apis/clusterconfigs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterConfigMapLister helps list ClusterConfigMaps.
// All objects returned here must be treated as read-only.
type ClusterConfigMapLister interface {
	// List lists all ClusterConfigMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterConfigMap, err error)
	// ClusterConfigMaps returns an object that can list and get ClusterConfigMaps.
	ClusterConfigMaps(namespace string) ClusterConfigMapNamespaceLister
	ClusterConfigMapListerExpansion
}

// clusterConfigMapLister implements the ClusterConfigMapLister interface.
type clusterConfigMapLister struct {
	indexer cache.Indexer
}

// NewClusterConfigMapLister returns a new ClusterConfigMapLister.
func NewClusterConfigMapLister(indexer cache.Indexer) ClusterConfigMapLister {
	return &clusterConfigMapLister{indexer: indexer}
}

// List lists all ClusterConfigMaps in the indexer.
func (s *clusterConfigMapLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterConfigMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterConfigMap))
	})
	return ret, err
}

// ClusterConfigMaps returns an object that can list and get ClusterConfigMaps.
func (s *clusterConfigMapLister) ClusterConfigMaps(namespace string) ClusterConfigMapNamespaceLister {
	return clusterConfigMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterConfigMapNamespaceLister helps list and get ClusterConfigMaps.
// All objects returned here must be treated as read-only.
type ClusterConfigMapNamespaceLister interface {
	// List lists all ClusterConfigMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterConfigMap, err error)
	// Get retrieves the ClusterConfigMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterConfigMap, error)
	ClusterConfigMapNamespaceListerExpansion
}

// clusterConfigMapNamespaceLister implements the ClusterConfigMapNamespaceLister
// interface.
type clusterConfigMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterConfigMaps in the indexer for a given namespace.
func (s clusterConfigMapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterConfigMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterConfigMap))
	})
	return ret, err
}

// Get retrieves the ClusterConfigMap from the indexer for a given namespace and name.
func (s clusterConfigMapNamespaceLister) Get(name string) (*v1alpha1.ClusterConfigMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterconfigmap"), name)
	}
	return obj.(*v1alpha1.ClusterConfigMap), nil
}
